{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport libraries from \"./data/libraries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LibraryListScreen = function LibraryListScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    searchText = _useState2[0],\n    setSearchText = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    sortBy = _useState4[0],\n    setSortBy = _useState4[1];\n  var sortLibrariesByPopularity = function sortLibrariesByPopularity(libraries) {\n    return libraries.slice().sort(function (a, b) {\n      return b.popularity - a.popularity;\n    });\n  };\n  var sortLibrariesByProximity = function sortLibrariesByProximity(libraries) {\n    return libraries.slice().sort(function (a, b) {\n      return a.proximity - b.proximity;\n    });\n  };\n  var applySortingAndFiltering = function applySortingAndFiltering() {\n    var filtered = libraries;\n    if (searchText) {\n      filtered = libraries.filter(function (library) {\n        return library.name.toLowerCase().includes(searchText.toLowerCase().trim());\n      });\n    }\n    if (sortBy === 'popularity') {\n      filtered = sortLibrariesByPopularity(filtered);\n    } else if (sortBy === 'proximity') {\n      filtered = sortLibrariesByProximity(filtered);\n    }\n    return filtered;\n  };\n  var handleSortBy = function handleSortBy(criteria) {\n    setSortBy(criteria);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.searchBar,\n      children: [_jsx(TextInput, {\n        placeholder: \"Search libraries\",\n        value: searchText,\n        onChangeText: function onChangeText(text) {\n          return setSearchText(text);\n        },\n        style: styles.input\n      }), _jsxs(View, {\n        style: styles.buttonGroup,\n        children: [_jsx(Button, {\n          title: \"Sort by Popularity\",\n          onPress: function onPress() {\n            return handleSortBy('popularity');\n          },\n          color: sortBy === 'popularity' ? 'green' : undefined\n        }), _jsx(Button, {\n          title: \"Sort by Proximity\",\n          onPress: function onPress() {\n            return handleSortBy('proximity');\n          },\n          color: sortBy === 'proximity' ? 'green' : undefined\n        })]\n      })]\n    }), _jsx(FlatList, {\n      data: applySortingAndFiltering(),\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(TouchableOpacity, {\n          style: styles.card,\n          onPress: function onPress() {\n            return navigation.navigate('LibraryDetail', {\n              library: item\n            });\n          },\n          children: [_jsx(Image, {\n            source: {\n              uri: item.imageUri\n            },\n            style: styles.image\n          }), _jsxs(View, {\n            style: styles.cardContent,\n            children: [_jsx(Text, {\n              style: styles.title,\n              children: item.name\n            }), _jsx(Text, {\n              children: item.summary\n            })]\n          })]\n        });\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  searchBar: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    padding: 8\n  },\n  card: {\n    backgroundColor: '#fff',\n    borderRadius: 10,\n    padding: 10,\n    marginBottom: 10,\n    flexDirection: 'row'\n  },\n  image: {\n    width: 80,\n    height: 80,\n    borderRadius: 5,\n    marginRight: 10\n  },\n  cardContent: {\n    flex: 1\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  buttonGroup: {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    marginLeft: 10\n  }\n});\nexport default LibraryListScreen;","map":{"version":3,"names":["React","useState","View","Text","FlatList","TextInput","TouchableOpacity","Image","StyleSheet","Button","libraries","jsx","_jsx","jsxs","_jsxs","LibraryListScreen","_ref","navigation","_useState","_useState2","_slicedToArray","searchText","setSearchText","_useState3","_useState4","sortBy","setSortBy","sortLibrariesByPopularity","slice","sort","a","b","popularity","sortLibrariesByProximity","proximity","applySortingAndFiltering","filtered","filter","library","name","toLowerCase","includes","trim","handleSortBy","criteria","style","styles","container","children","searchBar","placeholder","value","onChangeText","text","input","buttonGroup","title","onPress","color","undefined","data","keyExtractor","item","id","toString","renderItem","_ref2","card","navigate","source","uri","imageUri","image","cardContent","summary","create","flex","padding","flexDirection","alignItems","height","borderColor","borderWidth","marginBottom","backgroundColor","borderRadius","width","marginRight","fontSize","fontWeight","justifyContent","marginLeft"],"sources":["C:/Users/saura/OneDrive/Desktop/ReatcNative Workspace/BookNook/allComponents/LibraryListScreen.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\n// import libraries from './data/libraries'; // Mocked data\r\n\r\n// const LibraryListScreen = ({ navigation }) => {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const filteredLibraries = libraries.filter((library) =>\r\n//     library.name.toLowerCase().includes(searchText.toLowerCase())\r\n//   );\r\n\r\n//   const [sortedLibraries, setSortedLibraries] = useState(libraries);\r\n\r\n//   // Function to sort libraries by popularity\r\n//   const sortLibrariesByPopularity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n//   };\r\n\r\n//   // Function to sort libraries by proximity\r\n//   const sortLibrariesByProximity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n//   };\r\n\r\n//   const sortByPopularity = () => {\r\n//     const sorted = sortLibrariesByPopularity(sortedLibraries);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   const sortByProximity = () => {\r\n//     const sorted = sortLibrariesByProximity(sortedLibraries);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Button title=\"Sort by Popularity\" onPress={sortByPopularity} /><br></br>\r\n//       <Button title=\"Sort by Proximity\" onPress={sortByProximity} color=\"green\"/><br></br>\r\n//       <TextInput\r\n//         placeholder=\"Search libraries\"\r\n//         value={searchText}\r\n//         onChangeText={setSearchText}\r\n//         style={styles.input}\r\n//       />\r\n//       <FlatList\r\n//         data={sortedLibraries}\r\n//         keyExtractor={(item) => item.id.toString()}\r\n//         renderItem={({ item }) => (\r\n//           <TouchableOpacity\r\n//             style={styles.card}\r\n//             onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n//           >\r\n//             <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n//             <View style={styles.cardContent}>\r\n//               <Text style={styles.title}>{item.name}</Text>\r\n//               <Text>{item.summary}</Text>\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   input: {\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 8,\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginBottom: 10,\r\n//     flexDirection: 'row',\r\n//   },\r\n//   image: {\r\n//     width: 80,\r\n//     height: 80,\r\n//     borderRadius: 5,\r\n//     marginRight: 10,\r\n//   },\r\n//   cardContent: {\r\n//     flex: 1,\r\n//   },\r\n//   title: {\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n// });\r\n\r\n// export default LibraryListScreen;\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\n// import libraries from './data/libraries'; // Mocked data\r\n\r\n// const LibraryListScreen = ({ navigation }) => {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const filteredLibraries = libraries.filter((library) =>\r\n//     library.name.toLowerCase().includes(searchText.toLowerCase().trim()) // Use trim()\r\n//   );\r\n\r\n//   const [sortedLibraries, setSortedLibraries] = useState(libraries);\r\n\r\n//   // Function to sort libraries by popularity\r\n//   const sortLibrariesByPopularity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n//   };\r\n\r\n//   // Function to sort libraries by proximity\r\n//   const sortLibrariesByProximity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n//   };\r\n\r\n//   const sortByPopularity = () => {\r\n//     const sorted = sortLibrariesByPopularity(sortedLibraries);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   const sortByProximity = () => {\r\n//     const sorted = sortLibrariesByProximity(sortedLibraries);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Button title=\"Sort by Popularity\" onPress={sortByPopularity} /><br></br>\r\n//       <Button title=\"Sort by Proximity\" onPress={sortByProximity} color=\"green\"/><br></br>\r\n//       <TextInput\r\n//         placeholder=\"Search libraries\"\r\n//         value={searchText}\r\n//         onChangeText={setSearchText}\r\n//         style={styles.input}\r\n//       />\r\n//       <FlatList\r\n//         data={filteredLibraries}\r\n//         keyExtractor={(item) => item.id.toString()}\r\n//         renderItem={({ item }) => (\r\n//           <TouchableOpacity\r\n//             style={styles.card}\r\n//             onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n//           >\r\n//             <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n//             <View style={styles.cardContent}>\r\n//               <Text style={styles.title}>{item.name}</Text>\r\n//               <Text>{item.summary}</Text>\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   input: {\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 8,\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginBottom: 10,\r\n//     flexDirection: 'row',\r\n//   },\r\n//   image: {\r\n//     width: 80,\r\n//     height: 80,\r\n//     borderRadius: 5,\r\n//     marginRight: 10,\r\n//   },\r\n//   cardContent: {\r\n//     flex: 1,\r\n//   },\r\n//   title: {\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n// });\r\n\r\n// export default LibraryListScreen;\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\n// import libraries from './data/libraries'; // Mocked data\r\n\r\n// const LibraryListScreen = ({ navigation }) => {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const filteredLibraries = libraries.filter((library) =>\r\n//     library.name.toLowerCase().includes(searchText.toLowerCase().trim())\r\n//   );\r\n\r\n//   const [sortedLibraries, setSortedLibraries] = useState(libraries);\r\n\r\n//   // Function to sort libraries by popularity\r\n//   const sortLibrariesByPopularity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n//   };\r\n\r\n//   // Function to sort libraries by proximity\r\n//   const sortLibrariesByProximity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n//   };\r\n\r\n//   const sortByPopularity = () => {\r\n//     const sorted = sortLibrariesByPopularity([...sortedLibraries]);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   const sortByProximity = () => {\r\n//     const sorted = sortLibrariesByProximity([...sortedLibraries]);\r\n//     setSortedLibraries(sorted);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Button title=\"Sort by Popularity\" onPress={sortByPopularity} />\r\n//       <Button title=\"Sort by Proximity\" onPress={sortByProximity} color=\"green\" />\r\n//       <TextInput\r\n//         placeholder=\"Search libraries\"\r\n//         value={searchText}\r\n//         onChangeText={setSearchText}\r\n//         style={styles.input}\r\n//       />\r\n//       <FlatList\r\n//         data={filteredLibraries}\r\n//         keyExtractor={(item) => item.id.toString()}\r\n//         renderItem={({ item }) => (\r\n//           <TouchableOpacity\r\n//             style={styles.card}\r\n//             onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n//           >\r\n//             <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n//             <View style={styles.cardContent}>\r\n//               <Text style={styles.title}>{item.name}</Text>\r\n//               <Text>{item.summary}</Text>\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   input: {\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 8,\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginBottom: 10,\r\n//     flexDirection: 'row',\r\n//   },\r\n//   image: {\r\n//     width: 80,\r\n//     height: 80,\r\n//     borderRadius: 5,\r\n//     marginRight: 10,\r\n//   },\r\n//   cardContent: {\r\n//     flex: 1,\r\n//   },\r\n//   title: {\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n// });\r\n\r\n// export default LibraryListScreen;\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\n// import libraries from './data/libraries'; // Mocked data\r\n\r\n// const LibraryListScreen = ({ navigation }) => {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const [sortedLibraries, setSortedLibraries] = useState(libraries);\r\n\r\n//   // Function to sort libraries by popularity\r\n//   const sortLibrariesByPopularity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n//   };\r\n\r\n//   // Function to sort libraries by proximity\r\n//   const sortLibrariesByProximity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n//   };\r\n\r\n//   // Function to apply sorting and filtering\r\n//   const applySortingAndFiltering = () => {\r\n//     let filtered = libraries;\r\n//     if (searchText) {\r\n//       filtered = libraries.filter((library) =>\r\n//         library.name.toLowerCase().includes(searchText.toLowerCase().trim())\r\n//       );\r\n//     }\r\n//     if (sortBy === 'popularity') {\r\n//       filtered = sortLibrariesByPopularity(filtered);\r\n//     } else if (sortBy === 'proximity') {\r\n//       filtered = sortLibrariesByProximity(filtered);\r\n//     }\r\n//     setSortedLibraries(filtered);\r\n//   };\r\n\r\n//   const [sortBy, setSortBy] = useState(''); // 'popularity' or 'proximity'\r\n\r\n//   const handleSortBy = (criteria) => {\r\n//     setSortBy(criteria);\r\n//     applySortingAndFiltering();\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <View style={styles.buttonContainer}>\r\n//         <Button\r\n//           title=\"Sort by Popularity\"\r\n//           onPress={() => handleSortBy('popularity')}\r\n//           color={sortBy === 'popularity' ? 'green' : undefined}\r\n//         />\r\n//         <Button\r\n//           title=\"Sort by Proximity\"\r\n//           onPress={() => handleSortBy('proximity')}\r\n//           color={sortBy === 'proximity' ? 'green' : undefined}\r\n//         />\r\n//       </View>\r\n//       <TextInput\r\n//         placeholder=\"Search libraries\"\r\n//         value={searchText}\r\n//         onChangeText={(text) => {\r\n//           setSearchText(text);\r\n//           applySortingAndFiltering();\r\n//         }}\r\n//         style={styles.input}\r\n//       />\r\n//       <FlatList\r\n//         data={sortedLibraries}\r\n//         keyExtractor={(item) => item.id.toString()}\r\n//         renderItem={({ item }) => (\r\n//           <TouchableOpacity\r\n//             style={styles.card}\r\n//             onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n//           >\r\n//             <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n//             <View style={styles.cardContent}>\r\n//               <Text style={styles.title}>{item.name}</Text>\r\n//               <Text>{item.summary}</Text>\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   input: {\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 8,\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginBottom: 10,\r\n//     flexDirection: 'row',\r\n//   },\r\n//   image: {\r\n//     width: 80,\r\n//     height: 80,\r\n//     borderRadius: 5,\r\n//     marginRight: 10,\r\n//   },\r\n//   cardContent: {\r\n//     flex: 1,\r\n//   },\r\n//   title: {\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//   },\r\n// });\r\n\r\n// export default LibraryListScreen;\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\n// import libraries from './data/libraries'; // Mocked data\r\n\r\n// const LibraryListScreen = ({ navigation }) => {\r\n//   const [searchText, setSearchText] = useState('');\r\n//   const [sortBy, setSortBy] = useState(''); // 'popularity' or 'proximity'\r\n\r\n//   const sortLibrariesByPopularity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n//   };\r\n\r\n//   const sortLibrariesByProximity = (libraries) => {\r\n//     return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n//   };\r\n\r\n//   const applySortingAndFiltering = () => {\r\n//     let filtered = libraries;\r\n\r\n//     if (searchText) {\r\n//       filtered = libraries.filter((library) =>\r\n//         library.name.toLowerCase().includes(searchText.toLowerCase().trim())\r\n//       );\r\n//     }\r\n\r\n//     if (sortBy === 'popularity') {\r\n//       filtered = sortLibrariesByPopularity(filtered);\r\n//     } else if (sortBy === 'proximity') {\r\n//       filtered = sortLibrariesByProximity(filtered);\r\n//     }\r\n\r\n//     return filtered;\r\n//   };\r\n\r\n//   const handleSortBy = (criteria) => {\r\n//     setSortBy(criteria);\r\n//   };\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <TextInput\r\n//         placeholder=\"Search libraries\"\r\n//         value={searchText}\r\n//         onChangeText={(text) => setSearchText(text)}\r\n//         style={styles.input}\r\n//       />\r\n//       <View style={styles.buttonContainer}>\r\n//         <Button\r\n//           title=\"Sort by Popularity\"\r\n//           onPress={() => handleSortBy('popularity')}\r\n//           color={sortBy === 'popularity' ? 'green' : undefined}\r\n//         />\r\n//         <Button\r\n//           title=\"Sort by Proximity\"\r\n//           onPress={() => handleSortBy('proximity')}\r\n//           color={sortBy === 'proximity' ? 'green' : undefined}\r\n//         />\r\n//         {/* <Button\r\n//           title=\"Apply Filters\"\r\n//           onPress={() => applySortingAndFiltering()}\r\n//         /> */}\r\n//       </View>\r\n//       <FlatList\r\n//         data={applySortingAndFiltering()}\r\n//         keyExtractor={(item) => item.id.toString()}\r\n//         renderItem={({ item }) => (\r\n//           <TouchableOpacity\r\n//             style={styles.card}\r\n//             onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n//           >\r\n//             <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n//             <View style={styles.cardContent}>\r\n//               <Text style={styles.title}>{item.name}</Text>\r\n//               <Text>{item.summary}</Text>\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     padding: 16,\r\n//   },\r\n//   input: {\r\n//     height: 40,\r\n//     borderColor: 'gray',\r\n//     borderWidth: 1,\r\n//     marginBottom: 10,\r\n//     padding: 8,\r\n//   },\r\n//   card: {\r\n//     backgroundColor: '#fff',\r\n//     borderRadius: 10,\r\n//     padding: 10,\r\n//     marginBottom: 10,\r\n//     flexDirection: 'row',\r\n//   },\r\n//   image: {\r\n//     width: 80,\r\n//     height: 80,\r\n//     borderRadius: 5,\r\n//     marginRight: 10,\r\n//   },\r\n//   cardContent: {\r\n//     flex: 1,\r\n//   },\r\n//   title: {\r\n//     fontSize: 18,\r\n//     fontWeight: 'bold',\r\n//   },\r\n//   buttonContainer: {\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//   },\r\n// });\r\n\r\n// export default LibraryListScreen;\r\n\r\nimport React, { useState } from 'react';\r\nimport { View, Text, FlatList, TextInput, TouchableOpacity, Image, StyleSheet, Button } from 'react-native';\r\n\r\nimport libraries from './data/libraries'; // Mocked data\r\n\r\nconst LibraryListScreen = ({ navigation }) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [sortBy, setSortBy] = useState(''); // 'popularity' or 'proximity'\r\n\r\n  const sortLibrariesByPopularity = (libraries) => {\r\n    return libraries.slice().sort((a, b) => b.popularity - a.popularity);\r\n  };\r\n\r\n  const sortLibrariesByProximity = (libraries) => {\r\n    return libraries.slice().sort((a, b) => a.proximity - b.proximity);\r\n  };\r\n\r\n  const applySortingAndFiltering = () => {\r\n    let filtered = libraries;\r\n\r\n    if (searchText) {\r\n      filtered = libraries.filter((library) =>\r\n        library.name.toLowerCase().includes(searchText.toLowerCase().trim())\r\n      );\r\n    }\r\n\r\n    if (sortBy === 'popularity') {\r\n      filtered = sortLibrariesByPopularity(filtered);\r\n    } else if (sortBy === 'proximity') {\r\n      filtered = sortLibrariesByProximity(filtered);\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  const handleSortBy = (criteria) => {\r\n    setSortBy(criteria);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.searchBar}>\r\n        <TextInput\r\n          placeholder=\"Search libraries\"\r\n          value={searchText}\r\n          onChangeText={(text) => setSearchText(text)}\r\n          style={styles.input}\r\n        />\r\n        <View style={styles.buttonGroup}>\r\n          <Button\r\n            title=\"Sort by Popularity\"\r\n            onPress={() => handleSortBy('popularity')}\r\n            color={sortBy === 'popularity' ? 'green' : undefined}\r\n          />\r\n          <Button\r\n            title=\"Sort by Proximity\"\r\n            onPress={() => handleSortBy('proximity')}\r\n            color={sortBy === 'proximity' ? 'green' : undefined}\r\n          />\r\n        </View>\r\n      </View>\r\n      <FlatList\r\n        data={applySortingAndFiltering()}\r\n        keyExtractor={(item) => item.id.toString()}\r\n        renderItem={({ item }) => (\r\n          <TouchableOpacity\r\n            style={styles.card}\r\n            onPress={() => navigation.navigate('LibraryDetail', { library: item })}\r\n          >\r\n            <Image source={{ uri: item.imageUri }} style={styles.image} />\r\n            <View style={styles.cardContent}>\r\n              <Text style={styles.title}>{item.name}</Text>\r\n              <Text>{item.summary}</Text>\r\n            </View>\r\n          </TouchableOpacity>\r\n        )}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  searchBar: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    height: 40,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 10,\r\n    padding: 8,\r\n  },\r\n  card: {\r\n    backgroundColor: '#fff',\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n    flexDirection: 'row',\r\n  },\r\n  image: {\r\n    width: 80,\r\n    height: 80,\r\n    borderRadius: 5,\r\n    marginRight: 10,\r\n  },\r\n  cardContent: {\r\n    flex: 1,\r\n  },\r\n  title: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n  buttonGroup: {\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    marginLeft: 10,\r\n  },\r\n});\r\n\r\nexport default LibraryListScreen;\r\n"],"mappings":";AAiiBA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,MAAA;AAGxC,OAAOC,SAAS;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEzC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACrC,IAAAC,SAAA,GAAoCjB,QAAQ,CAAC,EAAE,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,UAAA,GAA4BtB,QAAQ,CAAC,EAAE,CAAC;IAAAuB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EAExB,IAAMG,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIjB,SAAS,EAAK;IAC/C,OAAOA,SAAS,CAACkB,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKA,CAAC,CAACC,UAAU,GAAGF,CAAC,CAACE,UAAU;IAAA,EAAC;EACtE,CAAC;EAED,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIvB,SAAS,EAAK;IAC9C,OAAOA,SAAS,CAACkB,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,CAACI,SAAS,GAAGH,CAAC,CAACG,SAAS;IAAA,EAAC;EACpE,CAAC;EAED,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAA,EAAS;IACrC,IAAIC,QAAQ,GAAG1B,SAAS;IAExB,IAAIW,UAAU,EAAE;MACde,QAAQ,GAAG1B,SAAS,CAAC2B,MAAM,CAAC,UAACC,OAAO;QAAA,OAClCA,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACpB,UAAU,CAACmB,WAAW,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;MAAA,CACtE,CAAC;IACH;IAEA,IAAIjB,MAAM,KAAK,YAAY,EAAE;MAC3BW,QAAQ,GAAGT,yBAAyB,CAACS,QAAQ,CAAC;IAChD,CAAC,MAAM,IAAIX,MAAM,KAAK,WAAW,EAAE;MACjCW,QAAQ,GAAGH,wBAAwB,CAACG,QAAQ,CAAC;IAC/C;IAEA,OAAOA,QAAQ;EACjB,CAAC;EAED,IAAMO,YAAY,GAAG,SAAfA,YAAYA,CAAIC,QAAQ,EAAK;IACjClB,SAAS,CAACkB,QAAQ,CAAC;EACrB,CAAC;EAED,OACE9B,KAAA,CAACZ,IAAI;IAAC2C,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BlC,KAAA,CAACZ,IAAI;MAAC2C,KAAK,EAAEC,MAAM,CAACG,SAAU;MAAAD,QAAA,GAC5BpC,IAAA,CAACP,SAAS;QACR6C,WAAW,EAAC,kBAAkB;QAC9BC,KAAK,EAAE9B,UAAW;QAClB+B,YAAY,EAAE,SAAAA,aAACC,IAAI;UAAA,OAAK/B,aAAa,CAAC+B,IAAI,CAAC;QAAA,CAAC;QAC5CR,KAAK,EAAEC,MAAM,CAACQ;MAAM,CACrB,CAAC,EACFxC,KAAA,CAACZ,IAAI;QAAC2C,KAAK,EAAEC,MAAM,CAACS,WAAY;QAAAP,QAAA,GAC9BpC,IAAA,CAACH,MAAM;UACL+C,KAAK,EAAC,oBAAoB;UAC1BC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMd,YAAY,CAAC,YAAY,CAAC;UAAA,CAAC;UAC1Ce,KAAK,EAAEjC,MAAM,KAAK,YAAY,GAAG,OAAO,GAAGkC;QAAU,CACtD,CAAC,EACF/C,IAAA,CAACH,MAAM;UACL+C,KAAK,EAAC,mBAAmB;UACzBC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMd,YAAY,CAAC,WAAW,CAAC;UAAA,CAAC;UACzCe,KAAK,EAAEjC,MAAM,KAAK,WAAW,GAAG,OAAO,GAAGkC;QAAU,CACrD,CAAC;MAAA,CACE,CAAC;IAAA,CACH,CAAC,EACP/C,IAAA,CAACR,QAAQ;MACPwD,IAAI,EAAEzB,wBAAwB,CAAC,CAAE;MACjC0B,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC;MAAA,CAAC;MAC3CC,UAAU,EAAE,SAAAA,WAAAC,KAAA;QAAA,IAAGJ,IAAI,GAAAI,KAAA,CAAJJ,IAAI;QAAA,OACjBhD,KAAA,CAACR,gBAAgB;UACfuC,KAAK,EAAEC,MAAM,CAACqB,IAAK;UACnBV,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMxC,UAAU,CAACmD,QAAQ,CAAC,eAAe,EAAE;cAAE9B,OAAO,EAAEwB;YAAK,CAAC,CAAC;UAAA,CAAC;UAAAd,QAAA,GAEvEpC,IAAA,CAACL,KAAK;YAAC8D,MAAM,EAAE;cAAEC,GAAG,EAAER,IAAI,CAACS;YAAS,CAAE;YAAC1B,KAAK,EAAEC,MAAM,CAAC0B;UAAM,CAAE,CAAC,EAC9D1D,KAAA,CAACZ,IAAI;YAAC2C,KAAK,EAAEC,MAAM,CAAC2B,WAAY;YAAAzB,QAAA,GAC9BpC,IAAA,CAACT,IAAI;cAAC0C,KAAK,EAAEC,MAAM,CAACU,KAAM;cAAAR,QAAA,EAAEc,IAAI,CAACvB;YAAI,CAAO,CAAC,EAC7C3B,IAAA,CAACT,IAAI;cAAA6C,QAAA,EAAEc,IAAI,CAACY;YAAO,CAAO,CAAC;UAAA,CACvB,CAAC;QAAA,CACS,CAAC;MAAA;IACnB,CACH,CAAC;EAAA,CACE,CAAC;AAEX,CAAC;AAED,IAAM5B,MAAM,GAAGtC,UAAU,CAACmE,MAAM,CAAC;EAC/B5B,SAAS,EAAE;IACT6B,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE;EACX,CAAC;EACD5B,SAAS,EAAE;IACT6B,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;EACd,CAAC;EACDzB,KAAK,EAAE;IACLsB,IAAI,EAAE,CAAC;IACPI,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,MAAM;IACnBC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,EAAE;IAChBN,OAAO,EAAE;EACX,CAAC;EACDV,IAAI,EAAE;IACJiB,eAAe,EAAE,MAAM;IACvBC,YAAY,EAAE,EAAE;IAChBR,OAAO,EAAE,EAAE;IACXM,YAAY,EAAE,EAAE;IAChBL,aAAa,EAAE;EACjB,CAAC;EACDN,KAAK,EAAE;IACLc,KAAK,EAAE,EAAE;IACTN,MAAM,EAAE,EAAE;IACVK,YAAY,EAAE,CAAC;IACfE,WAAW,EAAE;EACf,CAAC;EACDd,WAAW,EAAE;IACXG,IAAI,EAAE;EACR,CAAC;EACDpB,KAAK,EAAE;IACLgC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACDlC,WAAW,EAAE;IACXuB,aAAa,EAAE,QAAQ;IACvBY,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe5E,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}